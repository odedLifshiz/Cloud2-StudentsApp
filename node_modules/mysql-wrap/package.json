{
  "name": "mysql-wrap",
  "version": "0.3.0",
  "description": "Mysql interface and helper functions, wrapping node-mysql",
  "main": "mysql-wrap.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DubFriend/node-mysql-wrap"
  },
  "keywords": [
    "mysql",
    "node-mysql",
    "interface",
    "wrapper",
    "database"
  ],
  "author": {
    "name": "Brian Detering",
    "email": "BDeterin@gmail.com",
    "url": "http://www.briandetering.net/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DubFriend/node-mysql-wrap/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-contrib-nodeunit": "~0.3.3",
    "grunt-contrib-watch": "~0.6.1",
    "mysql": "~2.1.1"
  },
  "dependencies": {
    "q": "~1.0.1",
    "underscore": "~1.6.0"
  },
  "readme": "#node-mysql-wrap\n\nA lightweight wrapper for the [node-mysql](https://github.com/felixge/node-mysql)\ndriver.  Providing, select, insert, update, delete, row count, and support\nfor promises.\n\n`npm install mysql-wrap`\n\n##Instantiation\n```javascript\n//create a node-mysql connection\nvar mysql = require('mysql');\nvar connection =  mysql.createConnection({\n    host: 'your-host-name',\n    user: 'your-user',\n    password: 'your-password',\n    database: 'your-database-name'\n});\n\n//and pass it into the node-mysql-wrap constructor\nvar createMySQLWrap = require('mysql-wrap');\nvar sql = createMySQLWrap(connection);\n```\n\n##Methods\n\nIn general node-mysql-wrap exposes the same interface as node-mysql.  All methods\ntake callbacks with the same `function (err, res) {}` signature as node-mysql.\nIn addition all methods also return [q](https://github.com/kriskowal/q) promises.\n\nIn the following examples, parameters marked with an asterik (*) character are\noptional.\n\n###query(sqlStatement, \\*values, \\*callback)\n```javascript\nsql.query('SELECT name FROM fruit WHERE color = \"yellow\"')\n.then(function (res) {\n    console.log(res);\n    //example output: [{ name: \"banana\" }, { name: \"lemon\" }]\n});\n```\n\n`query` may take a configuration object in place of the `sqlStatement` parameter.\nthis object allows for node-mysql's nested table join api, as well as pagination.\n```javascript\nsql.query({\n\tsql: 'SELECT * FROM fruitBasket LEFT JOIN fruit ON fruit.basketID = fruitBasket.id',\n\tnestTables: true,\n\tpaginate: {\n\t\tpage: 3,\n\t\tresultsPerPage: 15\n\t}\n});\n```\n\n###one(sqlStatement, \\*values, \\*callback)\nWorks the same as sql.query except it only returns a single row instead of an array\nof rows.  Adds a \"LIMIT 1\" clause if a LIMIT clause is not allready present in\nthe sqlStatement.\n\n###select(table, \\*whereEqualsObject, \\*callback)\n```javascript\n// equivalent to sql.query('SELECT * FROM fruit WHERE color = \"yellow\" AND isRipe = \"true\"')\nsql.select('fruit', { color: 'yellow', isRipe: true })\n```\n\n###selectOne(table, \\*whereEqualsObject, \\*callback)\nSame as sql.select except selectOne returns a single row instead of an array of rows.\n\n\n`select` and `selectOne` may take a configuration object in place of the table\nparameter.  The configuration object add pagination and/or restrict which fields\nare selected.\n```javascript\nsql.select({\n\ttable: 'fruit',\n\tfields: ['color'],\n\tpaginate: {\n\t\tpage: 2,\n\t\tresultsPerPage: 15\n\t}\n});\n```\n\n\n\n###insert(table, insertObject, \\*callback)\n```javascript\nsql.insert('fruit', { name: 'plum', color: 'purple' });\n```\nYou can also pass sql.insert an array of insertObjects to insert multiple rows in a query\n```javascript\nsql.insert('fruit', [\n    { name: 'plum', color: 'purple'},\n    { name: 'grape', color: 'green' }\n])\n```\n\n###update(table, setValues, \\*whereEqualsObject, \\*callback)\n```javascript\nsql.update('fruit', { isRipe: false }, { name: 'grape' })\n```\n\n###delete(table, \\*whereEqualsObject, \\*callback)\n```javascript\nsql.delete('fruit', { isRipe: false })\n```\n\n##Errors\nErrors are the first parameter of a methods callback (same as in node-mysql), or\nusing promises they are passed to the catch method\n```javascript\nsql.insert('fruit', { name: 'banana' })\n.catch(function (err) {\n\n});\n```\n\nError objects are wrapped in a custom Error object.  A reference to this object\ncan be gotten at `sql.Error`\n\n##Transactions\nThe node-mysql transaction methods `beginTransaction`, `commit`, and `rollback`\nare available, and return promises as well as take callbacks.\n```javascript\nsql.beginTransaction()\n.then(function () {\n\treturn sql.insert(...)\n\n})\n.then(function () {\n\tsql.commit();\n})\n.catch(function (err) {\n\treturn sql.rollback(function (err) {\n\t\tthrow err;\n\t});\n});\n```\n\n##Other methods.\n\n###end, destroy, release, changeUser\nsame as in node-mysql.  `end` and `changeUser` return a promise as well as taking\na callback.",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/DubFriend/node-mysql-wrap",
  "_id": "mysql-wrap@0.3.0",
  "dist": {
    "shasum": "9eee5f9dbc9eef31fa02a27676a9f97895bc859e"
  },
  "_from": "mysql-wrap@*",
  "_resolved": "https://registry.npmjs.org/mysql-wrap/-/mysql-wrap-0.3.0.tgz"
}
