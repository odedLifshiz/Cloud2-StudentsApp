{
  "name": "ee-aws-s3-bucket",
  "description": "Easy AWS S3 Bucket implementation. Upload, download and delete ( recursive ) files from your buckets.",
  "version": "0.2.8",
  "homepage": "https://github.com/eventEmitter/ee-aws-s3-bucket",
  "author": {
    "name": "Michael van der Weg",
    "email": "michael@eventemitter.com",
    "url": "http://eventemitter.com/"
  },
  "licence": "mit",
  "repository": {
    "url": "https://github.com/eventEmitter/ee-aws-s3-bucket.git",
    "type": "git"
  },
  "engines": {
    "node": ">=v0.10.17"
  },
  "bugs": {
    "url": "https://github.com/eventEmitter/ee-aws-s3-bucket/issues"
  },
  "dependencies": {
    "ee-class": "0.4.x",
    "ee-arguments": "0.1.x",
    "ee-types": "0.1.x",
    "ee-log": "0.2.x",
    "ee-waiter": "0.1.x",
    "ee-error": "0.1.x",
    "ee-resource-pool": "0.1.x",
    "request": "2.36.x",
    "ee-xml-to-json": "0.1.x"
  },
  "devDependencies": {
    "ee-project": "0.2.x"
  },
  "optionalDependencies": {},
  "readme": "# ee-aws-s3-bucket\n\nEasy AWS S3 Bucket implementation. Upload, download and delete ( recursive ) files from your buckets.\n\n## installation\n\n\tnpm install ee-aws-s3-bucket\n\n## API\n\n### Constructor\n\n\tvar S3Bucket = require( \"ee-aws-s3-bucket\" );\n\n\tvar myBucket = new S3Bucket( {\n\t\t  key: \t\t\"\"\n\t\t, secret: \t\"\"\n\t\t, bucket: \t\"\"\n\t\t, maxConcurrent: 10 \t\t\t\t// generic limit, overrrides the default of 10\n\t\t, maxConcurrentDownloads: 100 \t\t// limit to 100 concurrent downloads, overrides the generic limit\n\t\t, maxConcurrentUploads: 50 \t\t\t// limit to 50 concurrent uploads, overrides the generic limit\n\t\t, maxConcurrentDeletes: 200 \t\t// limit to 200 concurrent deletes, overrides the generic limit\n\t\t, maxConcurrentLists: 5 \t\t\t// limit to 5 concurrent lists, overrides the generic limit\n\t} );\n\n\n### upload file\n\n\t// put ( upload ) an object into your S3 bucket\n\tmyBucket.put( path, data, [ callback( err ){} ], [ contentType ], [ headers ], [ private ] );\n\nyou may pass the arguments below in any order as long the first string argument is the path for the file\n\n- path: string, where to put the file ( mandatory )\n- data: string or buffer, the actual data ( mandatory )\n- callback: function, called when the upload finished or faield ( optional )\n- contentType: string, the content type header ( content type of the file, optional )\n- headers: object, you may pass any headers you wish ( optional )\n- private: flags a file as private or publid ( defaults ot private, optional ) \n\t\n\t\n#### example\n\t\n\tmyBucket.put( \"/test/file1.jpg\", fs.readfileSync( \"./test/file1.jpg\" ), \"Image/Jpeg\", function( err ){\n\t\tif ( err ) log.trace( err );\n\t\telse {\n\t\t\tlog.info( \"file was uploaded ...\" );\n\t\t}\n\t} );\n\n\n### list files\n\nlist files which have a certain path prefix, e.g. if you list «/te» all files in the «/test/» directory but also the «/test.js» will be listed.\n\n\tmyBucket.list( path, callback( err, list, next ){} );\n\n- path: string, where to put the file ( mandatory )\n- callback: function, called when the list was returned. if the list contains > 1'000 entries a next callback parameter will be delivered ( mandatory )  \n\n#### example\n\n\tvar handleListResult = function( err, list, next ){\n\t\tif ( err ) log.trace( err );\n\t\telse {\n\t\t\tlog( list );\n\n\t\t\t// get the next 1'000 items if available\n\t\t\tif( next ) next( handleListResult );\n\t\t}\n\t};\n\n\tmyBucket.list( \"/test/\", handleListResult );\n\n\n### download files\n\n\t// get ( download ) an object from your S3 bucket\n\tmyBucket.get( path, callback( err, file, headers ){} );\n\n- path: string, where to put the file ( mandatory )\n- callback: function, called when the download finished or faield ( mandatory )\n\n\n#### example\n\t\n\tmyBucket.get( \"/test/file1.jpg\", function( err, data, headers ){\n\t\tif ( err ) log.trace( err );\n\t\telse {\n\t\t\tfs.writeFile( \"./test/downlaodedfile.jpg\", data );\n\t\t\tlog( headers );\n\t\t}\n\t} );\n\n\n### delete files\n\nyou may either delete a directory or a single file, if you wish to delete a directory you have to end the path with a «/».\n\n\t// delete one or more object from your S3 bucket\n\tmyBucket.delete( path, callback( err ){} );\n\n- path: string, where to put the file ( mandatory )\n- callback: function, called when the file / directory was deleted or the operation failed ( mandatory )\n\n\n#### example\n\t\n\t// delete a file\n\tmyBucket.delete( \"/test/file1.jpg\", function( err ){\n\t\tif ( err ) log.trace( err );\n\t\telse {\n\t\t\tlog.info( \"file was deleted\" );\n\t\t}\n\t} );\n\n\n\t// delete all files in a directory\n\tmyBucket.delete( \"/test/\", function( err ){\n\t\tif ( err ) log.trace( err );\n\t\telse {\n\t\t\tlog.info( \"folder was deleted\" );\n\t\t}\n\t} );\n",
  "readmeFilename": "README.md",
  "_id": "ee-aws-s3-bucket@0.2.8",
  "_from": "ee-aws-s3-bucket@*"
}
