


	var   Class 	= require('ee-log')
		, type		= require('ee-types')
		, fs 		= require('fs')
		, path		= require('path');




	module.exports = new Class({


		// how many bytes before the log must be rotated -> 100mb
		  rotationSize: 100000000 

		// how many of the old log files to keep
		, iterations: 	10

		// the directory to store the logs in
		, dir: 			'/var/log'

		// the name for the logfiles
		, name: 		'anonymous'




		/** 
		 * .lognames returns the paths to the logfiles
		 */
		, get lognames() {
			return {
				  log: path.join(this.dir, this.name + '.log');
				, err: path.join(this.dir, this.name + '-error.log');
			}
		}




		/** 
		 * Class Constructor
		 *
		 * @param <Object> class options
		 */
		, init: function(options) {
			if(type.number(options.rotationSize)) 	this.rotationSize 	= options.rotationSize;
			if(type.number(options.iterations)) 	this.iterations 	= options.iterations;
			if(type.string(options.dir)) 			this.dir 			= options.dir;
			if(type.string(options.name)) 			this.name 			= options.name;


		}



		/** 
		 * _rotate() closes the current logfile and creates a new one
		 * stores the handle on the _file property
		 *
		 * @param <Function> callback
		 */
		, _rotate: function(callback){
			if (this._file){
				// close the existing handle
				fs.close(this._file, function(err){
					if (err) callback(err);
					else {
						fs.rename();
					}
				}.bind(this));
			}
			else {

			}
		}




		/** 
		 * _createFileHandle() creates a new file handle
		 *
		 * @param <Function> callback
		 */
		, _createFileHandle: function(callback){

		}




		/** 
		 * log() takes a log event, serializes and stores it in the current
		 * log file
		 *
		 * @param <Object> log event
		 */
		, log: function(evt) {

		}
	});