


	var   Class = require('ee-log')
		, type	= require('ee-types');


	module.exports = new Class({
		
		// file handle
		  _file: null

		// dir to store logfiles in
		, dir: '/var/log'

		// name for the logfile
		, name: 'anonymous'

		// after n bytes the file must be rotated
		, rotationSize: 100000000 // 100m

		// how many iterations to keep before deleting
		, iterations: 10

		// the size of the current logfile
		, size: null

		// is there a writable logfile open at the moment?
		, writable: false

		// number of entries to cache until a logfile becomes writable
		, cacheLength: 10000


		// queue for log entries for when the logfile is beeing moved
		, queue: []



		/** 
		 * Class Constructor
		 *
		 * @param <Object> class options
		 */
		, init: function(options) {
			if(type.number(options.rotationSize)) 	this.rotationSize 	= options.rotationSize;
			if(type.number(options.iterations)) 	this.iterations 	= options.iterations;
			if(type.string(options.dir)) 			this.dir 			= options.dir;
			if(type.string(options.name)) 			this.name 			= options.name;
		}



		/** 
		 * write() write a signle logline to the logifle
		 *
		 * @param <String> log line
		 */
		, write: function(data) {

			// is there a writable logifle?
			if (this.writable){

				// do we need to rotate the logfile?
				if (this.size > this.rotationSize){
					this.writable = false;
					this.queue.push(data);

					// rotate the logfile, writes will be cached
					this._rotate(function(err){
						if(err) throw new Error('Failed to rotate the logfile: ' + err).setName('LogRotateException');
						else {
							// enable writing again
							this.writable = true;

							// write buffered logs
							while(this.writable && this.queue.length) this.write(this.queue.shift());
						}
					}.bind(this));
				}

				// write to file
				else {
					this._file.write(data);
				}
			}

			// we need to buffer
			else {
				// but only if there isn't too much in the buffer already!
				if(this.queue.length < this.cacheLength){					
					this.queue.push(data);
				}

				// fail!
				else {					
					throw new Error('Failed to write to logfile, failed to buffer too because the buffer is overflowing, cannot log!').setName('LogOverflowException');
				}
			}
		}




		/** 
		 * close() close the logfile and rename it to
		 * logfilename-1.log
		 *
		 * @param <Function> callback, called when the file was closed and moved
		 */
		, _close: function(finished) {

		}
		



		/** 
		 * _open() the current logfile
		 *
		 * @param <Function> callback
		 */
		, _open: function(opened) {

		}
	});