{
  "name": "ee-event-emitter",
  "description": "An EventEmitter implementation",
  "version": "0.1.3",
  "homepage": "https://github.com/eventEmitter/ee-event-emitter",
  "author": {
    "name": "Michael van der Weg",
    "email": "michael@eventemitter.com",
    "url": "http://eventemitter.com/"
  },
  "licence": "mit",
  "repository": {
    "url": "https://github.com/eventEmitter/ee-event-emitter.git",
    "type": "git"
  },
  "engines": {
    "node": ">=v0.10.0"
  },
  "bugs": {
    "url": "https://github.com/eventEmitter/ee-event-emitter/issues"
  },
  "dependencies": {
    "ee-class": "1.0.x",
    "ee-log": "0.2.x"
  },
  "devDependencies": {
    "mocha": "1.17.x"
  },
  "optionalDependencies": {},
  "keywords": [
    "event",
    "eventemitter"
  ],
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --reporter spec"
  },
  "readme": "# ee-events\n\n## installation\n\n\tnpm install ee-events\n\n\tif an «error» event is emitted and there is no listenr for the error event a stacktrace is printed and the application exits.\n\n\n## API\n\n\tvar EventEmitter = require( \"ee-event-emitter\" );\n\tvar eventEmitter = new EventEmitter();\n\n\t// attach listener\n\teventEmitter.on( \"eventName\", cb );\n\n\t// attach listsner which is called once\n\teventEmitter.once( \"eventName\", cb );\n\n\t// remove all listeners for all events\n\teventEmitter.off();\n\n\t// remove listeners for specific event\n\teventEmitter.off( \"eventName\" );\n\n\t// remove a single listener\n\teventEmitter.off( \"eventName\", listener );\n\n\t// emit an event\n\teventEmitter.emit( \"eventName\", arg, arg, .... );\n\n\t// get all listeners\n\teventEmitter.listener();\n\n\t// get lsisteners for a specific event\n\teventEmitter.listsner( \"eventName\" );\n\n\t// event which is emitted when an event listener is added\n\teventEmitter.on( \"listener\", function( eventName, listener ){} );\n\n\t// event which is emitted when an event listener is removed\n\teventEmitter.on( \"removeListener\", function( eventName, listener ){} );\n\n\n## usage\n\n\n\tvar   Class     \t\t= require( \"ee-class\" )\n    \t, EventEmitter    \t= require( \"ee-event-emitter\" );\n\n\n\tvar Human = new Class( {\n\t    inherits: EventEmitter\n\t    , name: \"\"\n\t    , age: 29\n\n\t    , init: function( options ){\n\t        this.name = options.name;\n\t    }\n\n\n\t    , sayHello: function( to ){\n\t        this.emit( \"startHello\" );\n\t        console.log( \"Hi %s, my name is %s, i'm %s years old.\", to, this.name, this.age );\n\t        this.emit( \"endHello\" );\n\t    }\n\t} );\n\n\n\n\tvar Boy = new Class( {\n\t    inherits: Human\n\t    , age: 12\n\t} );\n\n\n\tvar fabian = new Boy( { \n\t    name: \"Fabian\" \n\t    , on: {\n\t          startHello: function(){ console.log( \"starting console output:\" ); }\n\t        , endHello: function(){ console.log( \"finished console output!\" ); }\n\t    }\n\t} );\n\n\n\tfabian.sayHello( \"michael\" );  // starting console output:\n\t                    // Hi my name is Fabian and i'm 12 years old.\n\t                    // finished console output!\n\n\n\n# Version History\n\n- 0.1.0: initial version",
  "readmeFilename": "README.md",
  "_id": "ee-event-emitter@0.1.3",
  "_from": "ee-event-emitter@0.1.x"
}
