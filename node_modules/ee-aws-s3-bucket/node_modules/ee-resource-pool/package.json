{
  "name": "ee-resource-pool",
  "description": "resource pool with queueing and rate limiting",
  "version": "0.1.9",
  "homepage": "https://github.com/eventEmitter/ee-resource-pool",
  "author": {
    "name": "Michael van der Weg",
    "email": "michael@eventemitter.com",
    "url": "http://eventemitter.com/"
  },
  "licence": "mit",
  "repository": {
    "url": "https://github.com/eventEmitter/ee-resource-pool.git",
    "type": "git"
  },
  "engines": {
    "node": ">=v0.10.17"
  },
  "bugs": {
    "url": "https://github.com/eventEmitter/ee-resource-pool/issues"
  },
  "dependencies": {
    "ee-class": "1.0.x",
    "ee-event-emitter": "0.1.x",
    "ee-types": "0.1.x",
    "ee-log": "0.2.x",
    "ee-error": "0.1.x",
    "ee-ttl-queue": "0.1.x",
    "ee-rate-limiter": "0.1.x"
  },
  "devDependencies": {
    "mocha": "1.17.x"
  },
  "optionalDependencies": {},
  "keywords": [
    "ee",
    "resource",
    "pool"
  ],
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --reporter spec"
  },
  "readme": "# ee-resource-pool\n\nresource pool for managing shared resources \n\n## installation\n\n\tnpm install ee-resource-pool\n\t\n## build status\n\n[![Build Status](https://travis-ci.org/eventEmitter/ee-resource-pool.png?branch=master)](https://travis-ci.org/eventEmitter/ee-resource-pool)\n\n\n## usage\n\nexample of a pool of connections, there may never be more than 50 connections open. \n\n\n\tvar ResourcePool = require( \"ee-resource-pool\" );\n\n\n\tvar pool = new ResourcePool( {\n\t\t  max: 50 \t\t\t\t\t// max 50 connections\n\t\t, maxWaitingRequests: 1000 \t// fail requests for a connection when there are already more then 1'000 requests waiting\n\t\t, timeout: 5000 \t\t\t// fail requests for a connection after waiting 5 seconds\n\t\t, idle: 600000 \t\t\t\t// close conenctions if they weren't used in the last 10 minutes\n\t\t, prefetch: 10 \t\t\t\t// create always 10% more connections currently used, so we neevr have to wait for aconnection to be created\n\t} );\n\n\n\t// the pool can request more resources, but if you don't need \n\t// special resources you dont listen for the event and the pool \n\t// will create its own resource representation \n\t// -> this is entirely optional\n\tpool.on( \"resourceRequest\", function( callback ){\n\t\tcallback( new Connection() );\n\t} );\n\n\n\t// if the pool gets a free resource which isn't used by the queue it emits the «resource» event\n\tpool.on( \"resource\", function(){\n\t\tpool.get( function( err, resource ){\n\t\t\t// you should get that exact resource which triggered the event\n\n\t\t} );\n\t} );\n\n\n\t// this code is placed where you request the connections\n\tpool.get( function( err, connection ){\n\t\tif ( err ){\n\t\t\tif ( err.name === \"CapacityOverloadException\" ) {\n\t\t\t\tconsole.log( \"the resource pool is over capacity ...\", err );\n\t\t\t}\n\t\t\telse if ( err.name === \"RequestTimeoutException\" ){\n\t\t\t\tconsole.log( \"timeout while waiting for a free connection ...\", err );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// use the connection\n\t\t\t// IMPORTANT: if you are finished using ti you have to call the «freeResource» or «closeResource» method \n\n\t\t\tconnection.query( \"whatever\", function( err, data ){\n\t\t\t\tif ( err ){\n\t\t\t\t\tconsole.log( \"crap, my query failed\" );\n\t\t\t\t\tconnection.closeResource();\n\t\t\t\t\tconnection.close();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log( \"got some data :)\" );\n\t\t\t\t\tconnection.freeResource();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n\n\n\nexample of an image uploader which never should upload more than 5 images at the same time\n\n\tvar ResourcePool = require( \"ee-resource-pool\" );\n\n\n\tvar pool = new ResourcePool( {\n\t\t  timeout: 3600000 \t\t\t// fail if we cannot upload an image within the next hour\n\t\t, ratelLimit: 5 \t\t\t// max 5 uploads / second\n\t} );\n\n\n\t// the pool can request more resources\n\tpool.on( \"resourceRequest\", function( callback ){\n\t\tcallback( new Uploader() );\n\t} );\n\n\n\t// this code is placed where you uploader your imges, it will rate liimit your request...\n\tpool.get( function( err, uploader ){\n\t\tif ( err ){\n\t\t\tif ( err.name === \"RequestTimeoutException\" ){\n\t\t\t\tconsole.log( \"timeout while waiting for a free uploader ...\", err );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// use the uploader\n\t\t\t// IMPORTANT: if you are finished using ti you have to call the «freeResource» or «closeResource» method \n\n\t\t\tuploader.upload.query( data, function( err ){\n\t\t\t\tif ( err ){\n\t\t\t\t\tconsole.log( \"crap, the upload failed\" );\n\t\t\t\t\tuploader.closeResource();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log( \"upload finished :)\" );\n\t\t\t\t\tuploader.freeResource();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );",
  "readmeFilename": "README.md",
  "_id": "ee-resource-pool@0.1.9",
  "_from": "ee-resource-pool@0.1.x"
}
